{"ast":null,"code":"var _jsxFileName = \"/Users/im/Desktop/factoringplus/signup/src/components/Suggest.js\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest'; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    backgroundColor: \"#fff\"\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n}, suggestion.name);\n\nclass Suggest extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.renderSuggestionsContainer = ({\n      containerProps,\n      children,\n      query\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, containerProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }\n      }), children, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, \"Press Enter to search \", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 33\n        }\n      }, query)));\n    };\n\n    this.renderInputComponent = inputProps => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, inputProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, \"custom stuff\"));\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      var myHeaders = new Headers();\n      myHeaders.append(\"Authorization\", \"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");\n      myHeaders.append(\"Content-Type\", \"application/json\");\n      var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: JSON.stringify({\n          \"query\": value\n        }),\n        redirect: 'follow'\n      };\n\n      if (value.length > 3) {\n        let languages = [];\n        fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\", requestOptions).then(response => response.json()).then(result => {\n          result.suggestions.map(element => {\n            languages.push({\n              name: element.value,\n              inn: element.data.inn,\n              ogrn: element.data.ogrn\n            });\n          });\n          this.setState({\n            suggestions: languages\n          });\n        }).catch(error => console.log('error', error));\n      }\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: this.props.palceholder,\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Suggest;","map":{"version":3,"sources":["/Users/im/Desktop/factoringplus/signup/src/components/Suggest.js"],"names":["React","Autosuggest","getSuggestionValue","suggestion","name","renderSuggestion","backgroundColor","Suggest","Component","constructor","onChange","event","newValue","setState","value","renderSuggestionsContainer","containerProps","children","query","renderInputComponent","inputProps","onSuggestionsFetchRequested","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","redirect","length","languages","fetch","then","response","json","result","suggestions","map","element","push","inn","data","ogrn","catch","error","console","log","onSuggestionsClearRequested","state","render","placeholder","props","palceholder"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <span style={{backgroundColor:\"#fff\"}}>\n    {suggestion.name}\n  </span>\n);\n\nclass Suggest extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  renderSuggestionsContainer = ({ containerProps , children, query }) => {\n    return (\n      <div {... containerProps}>\n        {children}\n        <div>\n          Press Enter to search <strong>{query}</strong>\n        </div>\n      </div>\n    );\n  }\n\n  renderInputComponent = inputProps => (\n    <div>\n      <input {...inputProps} />\n      <div>custom stuff</div>\n    </div>\n  );\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify({\"query\":value}),\n      redirect: 'follow'\n    };\n    if (value.length > 3) {\n      let languages = [];\n      fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\", requestOptions)\n        .then(response => response.json())\n        .then(result => {\n          result.suggestions.map(element => {\n            languages.push({name: element.value, inn:element.data.inn, ogrn:element.data.ogrn});\n          });\n          this.setState({ suggestions: languages });\n        })\n        .catch(error => console.log('error', error));\n    }\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: this.props.palceholder,\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default Suggest;"]},"metadata":{},"sourceType":"module"}