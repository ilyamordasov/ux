{"ast":null,"code":"var _jsxFileName = \"/Users/im/Desktop/factoringplus/signup/src/components/Suggest.js\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Form } from 'react-bootstrap'; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    backgroundColor: \"#fff\"\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }\n}, suggestion.name);\n\nclass Suggest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.renderSuggestionsContainer = ({\n      containerProps,\n      children,\n      query\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, containerProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }), children, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          border: \"1px solid #000\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, \"Press Enter to search \", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 33\n        }\n      }, query)));\n    };\n\n    this.renderInputComponent = inputProps => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, Object.assign({}, inputProps, {\n      type: \"text\",\n      placeholder: this.props.placeholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    })));\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      var myHeaders = new Headers();\n      myHeaders.append(\"Authorization\", \"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");\n      myHeaders.append(\"Content-Type\", \"application/json\");\n      var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: JSON.stringify({\n          \"query\": value\n        }),\n        redirect: 'follow'\n      };\n\n      if (value.length > 3) {\n        let languages = [];\n        fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/\" + this.props.method, requestOptions).then(response => response.json()).then(result => {\n          result.suggestions.map(element => {\n            languages.push({\n              name: element.value,\n              inn: element.data.inn,\n              ogrn: element.data.ogrn\n            });\n          });\n          this.setState({\n            suggestions: languages\n          });\n        }).catch(error => console.log('error', error));\n      }\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (event, {\n      suggestion\n    }) => {\n      if (this.props.callback) {\n        this.props.callback(suggestion);\n      }\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: this.props.palceholder,\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      renderInputComponent: this.renderInputComponent,\n      renderSuggestionsContainer: this.renderSuggestionsContainer,\n      onSuggestionSelected: this.onSuggestionSelected,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Suggest;","map":{"version":3,"sources":["/Users/im/Desktop/factoringplus/signup/src/components/Suggest.js"],"names":["React","Autosuggest","Button","Form","getSuggestionValue","suggestion","name","renderSuggestion","backgroundColor","Suggest","Component","constructor","props","onChange","event","newValue","setState","value","renderSuggestionsContainer","containerProps","children","query","border","renderInputComponent","inputProps","placeholder","onSuggestionsFetchRequested","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","redirect","length","languages","fetch","then","response","json","result","suggestions","map","element","push","inn","data","ogrn","catch","error","console","log","onSuggestionsClearRequested","onSuggestionSelected","callback","state","render","palceholder"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,OAAO,sCAAP;AAEA,SAAQC,MAAR,EAAeC,IAAf,QAA0B,iBAA1B,C,CAEA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACC,IAApD,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAGF,UAAU,iBACjC;AAAM,EAAA,KAAK,EAAE;AAACG,IAAAA,eAAe,EAAC;AAAjB,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGH,UAAU,CAACC,IADd,CADF;;AAMA,MAAMG,OAAN,SAAsBT,KAAK,CAACU,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,QATmB,GASR,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEF;AADK,OAAd;AAGD,KAbkB;;AAAA,SAenBG,0BAfmB,GAeU,CAAC;AAAEC,MAAAA,cAAF;AAAmBC,MAAAA,QAAnB;AAA6BC,MAAAA;AAA7B,KAAD,KAA0C;AACrE,0BACE,6CAASF,cAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGC,QADH,eAEE;AAAK,QAAA,KAAK,EAAE;AAACE,UAAAA,MAAM,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAASD,KAAT,CADxB,CAFF,CADF;AAQD,KAxBkB;;AAAA,SA0BnBE,oBA1BmB,GA0BIC,UAAU,iBAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD,CAAM,OAAN,oBAAkBA,UAAlB;AAA8B,MAAA,IAAI,EAAC,MAAnC;AAA0C,MAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWa,WAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CA3BiB;;AAAA,SAkCnBC,2BAlCmB,GAkCW,CAAC;AAAET,MAAAA;AAAF,KAAD,KAAe;AAC3C,UAAIU,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,MAAAA,SAAS,CAACE,MAAV,CAAiB,eAAjB,EAAkC,gDAAlC;AACAF,MAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,UAAIC,cAAc,GAAG;AACnBC,QAAAA,MAAM,EAAE,MADW;AAEnBC,QAAAA,OAAO,EAAEL,SAFU;AAGnBM,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,mBAAQlB;AAAT,SAAf,CAHa;AAInBmB,QAAAA,QAAQ,EAAE;AAJS,OAArB;;AAMA,UAAInB,KAAK,CAACoB,MAAN,GAAe,CAAnB,EAAsB;AACpB,YAAIC,SAAS,GAAG,EAAhB;AACAC,QAAAA,KAAK,CAAC,kEAAgE,KAAK3B,KAAL,CAAWmB,MAA5E,EAAoFD,cAApF,CAAL,CACGU,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,MAAM,IAAI;AACdA,UAAAA,MAAM,CAACC,WAAP,CAAmBC,GAAnB,CAAuBC,OAAO,IAAI;AAChCR,YAAAA,SAAS,CAACS,IAAV,CAAe;AAACzC,cAAAA,IAAI,EAAEwC,OAAO,CAAC7B,KAAf;AAAsB+B,cAAAA,GAAG,EAACF,OAAO,CAACG,IAAR,CAAaD,GAAvC;AAA4CE,cAAAA,IAAI,EAACJ,OAAO,CAACG,IAAR,CAAaC;AAA9D,aAAf;AACD,WAFD;AAGA,eAAKlC,QAAL,CAAc;AAAE4B,YAAAA,WAAW,EAAEN;AAAf,WAAd;AACD,SAPH,EAQGa,KARH,CAQSC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,CARlB;AASD;AACF,KAzDkB;;AAAA,SA4DnBG,2BA5DmB,GA4DW,MAAM;AAClC,WAAKvC,QAAL,CAAc;AACZ4B,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAhEkB;;AAAA,SAkEnBY,oBAlEmB,GAkEI,CAAC1C,KAAD,EAAQ;AAAET,MAAAA;AAAF,KAAR,KAA2B;AAChD,UAAG,KAAKO,KAAL,CAAW6C,QAAd,EAAwB;AACtB,aAAK7C,KAAL,CAAW6C,QAAX,CAAoBpD,UAApB;AACD;AACF,KAtEkB;;AAGjB,SAAKqD,KAAL,GAAa;AACXzC,MAAAA,KAAK,EAAE,EADI;AAEX2B,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAiEDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1C,MAAAA,KAAF;AAAS2B,MAAAA;AAAT,QAAyB,KAAKc,KAApC,CADO,CAGP;;AACA,UAAMlC,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,KAAKb,KAAL,CAAWgD,WADP;AAEjB3C,MAAAA,KAFiB;AAGjBJ,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB,CAJO,CAUP;;AACA,wBACE,oBAAC,WAAD;AACE,MAAA,WAAW,EAAE+B,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKlB,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAK6B,2BAHpC;AAIE,MAAA,kBAAkB,EAAEnD,kBAJtB;AAKE,MAAA,gBAAgB,EAAEG,gBALpB;AAME,MAAA,oBAAoB,EAAE,KAAKgB,oBAN7B;AAOE,MAAA,0BAA0B,EAAE,KAAKL,0BAPnC;AAQE,MAAA,oBAAoB,EAAE,KAAKsC,oBAR7B;AASE,MAAA,UAAU,EAAEhC,UATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAaD;;AAjGmC;;AAoGtC,eAAef,OAAf","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Button,Form} from 'react-bootstrap';\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <span style={{backgroundColor:\"#fff\"}}>\n    {suggestion.name}\n  </span>\n);\n\nclass Suggest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  renderSuggestionsContainer = ({ containerProps , children, query }) => {\n    return (\n      <div {...containerProps}>\n        {children}\n        <div style={{border: \"1px solid #000\"}}>\n          Press Enter to search <strong>{query}</strong>\n        </div>\n      </div>\n    );\n  }\n\n  renderInputComponent = inputProps => (\n    <div>\n      <Form.Control {...inputProps} type=\"text\" placeholder={this.props.placeholder}/>\n    </div>\n  );\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify({\"query\":value}),\n      redirect: 'follow'\n    };\n    if (value.length > 3) {\n      let languages = [];\n      fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/\"+this.props.method, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n          result.suggestions.map(element => {\n            languages.push({name: element.value, inn:element.data.inn, ogrn:element.data.ogrn});\n          });\n          this.setState({ suggestions: languages });\n        })\n        .catch(error => console.log('error', error));\n    }\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onSuggestionSelected = (event, { suggestion }) => {\n    if(this.props.callback) {\n      this.props.callback(suggestion);\n    }\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: this.props.palceholder,\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        renderInputComponent={this.renderInputComponent}\n        renderSuggestionsContainer={this.renderSuggestionsContainer}\n        onSuggestionSelected={this.onSuggestionSelected}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default Suggest;"]},"metadata":{},"sourceType":"module"}