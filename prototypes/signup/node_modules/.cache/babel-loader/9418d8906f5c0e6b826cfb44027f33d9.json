{"ast":null,"code":"import _classCallCheck from\"/Users/im/Desktop/factoringplus/signup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/im/Desktop/factoringplus/signup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/im/Desktop/factoringplus/signup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/im/Desktop/factoringplus/signup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import Autosuggest from'react-autosuggest';import'bootstrap/dist/css/bootstrap.min.css';import{Button,Form}from'react-bootstrap';// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nvar getSuggestionValue=function getSuggestionValue(suggestion){return suggestion.name;};// Use your imagination to render suggestions.\nvar renderSuggestion=function renderSuggestion(suggestion){return/*#__PURE__*/React.createElement(\"span\",{style:{backgroundColor:\"#fff\"}},suggestion.name);};var Suggest=/*#__PURE__*/function(_React$Component){_inherits(Suggest,_React$Component);var _super=_createSuper(Suggest);function Suggest(props){var _this;_classCallCheck(this,Suggest);_this=_super.call(this,props);_this.onChange=function(event,_ref){var newValue=_ref.newValue;_this.setState({value:newValue});};_this.renderSuggestionsContainer=function(_ref2){var containerProps=_ref2.containerProps,children=_ref2.children,query=_ref2.query;return/*#__PURE__*/React.createElement(\"div\",containerProps,children);};_this.renderInputComponent=function(inputProps){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Form.Control,Object.assign({},inputProps,{type:\"text\",placeholder:_this.props.placeholder})));};_this.onSuggestionsFetchRequested=function(_ref3){var value=_ref3.value;var myHeaders=new Headers();myHeaders.append(\"Authorization\",\"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");myHeaders.append(\"Content-Type\",\"application/json\");var requestOptions={method:'POST',headers:myHeaders,body:JSON.stringify({\"query\":value}),redirect:'follow'};if(value.length>3){var languages=[];fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/\"+_this.props.method,requestOptions).then(function(response){return response.json();}).then(function(result){result.suggestions.map(function(element){languages.push({name:element.value,inn:element.data.inn,ogrn:element.data.ogrn});});_this.setState({suggestions:languages});}).catch(function(error){return console.log('error',error);});}};_this.onSuggestionsClearRequested=function(){_this.setState({suggestions:[]});};_this.onSuggestionSelected=function(event,_ref4){var suggestion=_ref4.suggestion;if(_this.props.callback){_this.props.callback(suggestion);}};_this.state={value:'',suggestions:[]};return _this;}_createClass(Suggest,[{key:\"render\",value:function render(){var _this$state=this.state,value=_this$state.value,suggestions=_this$state.suggestions;// Autosuggest will pass through all these props to the input.\nvar inputProps={placeholder:this.props.palceholder,value:value,onChange:this.onChange};// Finally, render it!\nreturn/*#__PURE__*/React.createElement(Autosuggest,{suggestions:suggestions,onSuggestionsFetchRequested:this.onSuggestionsFetchRequested,onSuggestionsClearRequested:this.onSuggestionsClearRequested,getSuggestionValue:getSuggestionValue,renderSuggestion:renderSuggestion,renderInputComponent:this.renderInputComponent,renderSuggestionsContainer:this.renderSuggestionsContainer,onSuggestionSelected:this.onSuggestionSelected,inputProps:inputProps});}}]);return Suggest;}(React.Component);export default Suggest;","map":{"version":3,"sources":["/Users/im/Desktop/factoringplus/signup/src/components/Suggest.js"],"names":["React","Autosuggest","Button","Form","getSuggestionValue","suggestion","name","renderSuggestion","backgroundColor","Suggest","props","onChange","event","newValue","setState","value","renderSuggestionsContainer","containerProps","children","query","renderInputComponent","inputProps","placeholder","onSuggestionsFetchRequested","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","redirect","length","languages","fetch","then","response","json","result","suggestions","map","element","push","inn","data","ogrn","catch","error","console","log","onSuggestionsClearRequested","onSuggestionSelected","callback","state","palceholder","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Button,Form} from 'react-bootstrap';\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <span style={{backgroundColor:\"#fff\"}}>\n    {suggestion.name}\n  </span>\n);\n\nclass Suggest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  renderSuggestionsContainer = ({ containerProps , children, query }) => {\n    return (\n      <div {... containerProps}>\n        {children}\n      </div>\n    );\n  }\n\n  renderInputComponent = inputProps => (\n    <div>\n      {/* <input {...inputProps} /> */}\n      <Form.Control {...inputProps} type=\"text\" placeholder={this.props.placeholder}/>\n    </div>\n  );\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify({\"query\":value}),\n      redirect: 'follow'\n    };\n    if (value.length > 3) {\n      let languages = [];\n      fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/\"+this.props.method, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n          result.suggestions.map(element => {\n            languages.push({name: element.value, inn:element.data.inn, ogrn:element.data.ogrn});\n          });\n          this.setState({ suggestions: languages });\n        })\n        .catch(error => console.log('error', error));\n    }\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onSuggestionSelected = (event, { suggestion }) => {\n    if(this.props.callback) {\n      this.props.callback(suggestion);\n    }\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: this.props.palceholder,\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        renderInputComponent={this.renderInputComponent}\n        renderSuggestionsContainer={this.renderSuggestionsContainer}\n        onSuggestionSelected={this.onSuggestionSelected}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default Suggest;"]},"metadata":{},"sourceType":"module"}