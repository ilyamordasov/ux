{"ast":null,"code":"var _jsxFileName = \"/Users/im/Desktop/factoringplus/signup/src/components/Suggest.js\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest'; // Imagine you have a list of languages that you'd like to autosuggest.\n\nconst languages = [{\n  name: 'C',\n  year: 1972\n}, {\n  name: 'Elm',\n  year: 2012\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Authorization\", \"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  var raw = JSON.stringify({\n    \"query\": value\n  });\n  var requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow'\n  };\n\n  if (value.length > 3) {\n    fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\", requestOptions).then(response => response.text()).then(result => {\n      let jsn = JSON.stringify(result);\n      console.log(jsn.suggestions[0].value); //         response.suggestions.map(element => {\n      //   languages = languages.append({name: element.value});\n      // });\n    }).catch(error => console.log('error', error));\n  }\n\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    backgroundColor: \"#fff\",\n    width: \"100%\"\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }\n}, suggestion.name);\n\nclass Suggest extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: this.props.palceholder,\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Suggest;","map":{"version":3,"sources":["/Users/im/Desktop/factoringplus/signup/src/components/Suggest.js"],"names":["React","Autosuggest","languages","name","year","getSuggestions","value","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","length","fetch","then","response","text","result","jsn","console","log","suggestions","catch","error","inputValue","trim","toLowerCase","inputLength","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","backgroundColor","width","Suggest","Component","constructor","onChange","event","newValue","setState","onSuggestionsFetchRequested","onSuggestionsClearRequested","state","render","inputProps","placeholder","props","palceholder"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst languages = [\n  {\n    name: 'C',\n    year: 1972\n  },\n  {\n    name: 'Elm',\n    year: 2012\n  }\n]; \n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Authorization\", \"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  var raw = JSON.stringify({\"query\":value});\n\n  var requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow'\n  };\n  if (value.length > 3) {\n    fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\", requestOptions)\n      .then(response => response.text())\n      .then(result => {\n        let jsn = JSON.stringify(result);\n        console.log(jsn.suggestions[0].value);\n        //         response.suggestions.map(element => {\n        //   languages = languages.append({name: element.value});\n        // });\n      })\n      .catch(error => console.log('error', error));\n  }\n\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0 ? [] : languages.filter(lang =>\n    lang.name.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <div style={{backgroundColor:\"#fff\", width:\"100%\"}}>\n    {suggestion.name}\n  </div>\n);\n\nclass Suggest extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: this.props.palceholder,\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default Suggest;"]},"metadata":{},"sourceType":"module"}