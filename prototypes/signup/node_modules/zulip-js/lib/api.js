"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _instanceof2 = _interopRequireDefault(require("@babel/runtime/helpers/instanceof"));

var helper = require('./helper');

function api(baseUrl, config, method, params) {
  var url = baseUrl;
  var auth = Buffer.from("".concat(config.username, ":").concat(config.apiKey)).toString('base64');
  var authHeader = "Basic ".concat(auth);
  var options = {
    method: method,
    headers: {
      Authorization: authHeader
    }
  };

  if (method === 'POST') {
    options.body = new helper.FormData();
    Object.keys(params).forEach(function (key) {
      var data = params[key];

      if (Array.isArray(data)) {
        data = JSON.stringify(data);
      }

      options.body.append(key, data);
    });
  } else if (params) {
    var generateQueryParam = function generateQueryParam(key) {
      return "".concat(key, "=").concat(params[key]);
    };

    var queryParams = Object.keys(params).map(generateQueryParam);
    url = "".concat(url, "?").concat(queryParams.join('&'));
  }

  var response = null;
  return helper.fetch(url, options).then(function (res) {
    response = res;
    return res.json();
  })["catch"](function (e) {
    if ((0, _instanceof2["default"])(e, SyntaxError)) {
      // We probably got a non-JSON response from the server.
      // We should inform the user of the same.
      var message = 'Server Returned a non-JSON response.';

      if (response.status === 404) {
        message += " Maybe endpoint: ".concat(method, " ").concat(response.url.replace(config.apiURL, ''), " doesn't exist.");
      } else {
        message += ' Please check the API documentation.';
      }

      var error = new Error(message);
      error.res = response;
      throw error;
    }

    throw e;
  });
}

module.exports = api;