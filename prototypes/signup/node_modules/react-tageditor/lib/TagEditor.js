"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _const = require("./const");

var _react = _interopRequireWildcard(require("react"));

var _connectToStore = require("./connectToStore");

var _Tag = _interopRequireDefault(require("./Tag"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var TagEditor =
/*#__PURE__*/
function (_Component) {
  _inherits(TagEditor, _Component);

  function TagEditor(props) {
    var _this;

    _classCallCheck(this, TagEditor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TagEditor).call(this, props));
    _this.state = {
      editing: null,
      caret: null,
      repeat: null
    };
    return _this;
  }

  _createClass(TagEditor, [{
    key: "handleClick",
    value: function handleClick() {
      this.props.store.add('', function (err, newTag, indexOfNewTag) {
        this.setState({
          editing: indexOfNewTag,
          caret: 0
        });
      }.bind(this));
    }
  }, {
    key: "handleTagSave",
    value: function handleTagSave(tag, text) {
      this.props.store.save(tag, text, function (err) {
        var _this2 = this;

        if (!err) {
          this.props.onChange && this.props.onChange(text, this.props.store.output(), 'add');
          return;
        }

        switch (err.name) {
          case _const.ERROR.EMPTY:
            break;

          case _const.ERROR.REPEAT:
            var tagIndex;
            this.props.store.tags.forEach(function (t, i) {
              if (t.text === text) {
                tagIndex = i;
              }
            });
            this.setState({
              repeat: tagIndex
            });
            setTimeout(function () {
              _this2.setState({
                repeat: null
              });
            }, 1500);
            break;

          default:
            break;
        }

        this.props.onError && this.props.onError(err);
        this.handleTagRemove(tag);
      }.bind(this));
      this.setState({
        editing: null,
        caret: null
      });
    }
  }, {
    key: "handleTagFocus",
    value: function handleTagFocus(tag) {
      var tagIndex;
      this.props.store.tags.forEach(function (t, i) {
        if (tag.id === t.id) {
          tagIndex = i;
        }
      });

      if (tagIndex === void 0) {
        return;
      }

      this.setState({
        editing: tagIndex
      });
    }
  }, {
    key: "handleTagBlur",
    value: function handleTagBlur(tag, caretOnBlur, lastKeyOnBlur) {
      var tags = this.props.store.tags,
          tagIndex;

      if (!tags.length) {
        this.handleClick();
        return;
      }

      tags.forEach(function (t, i) {
        if (t.id === tag.id) {
          tagIndex = i;
        }
      });

      if (caretOnBlur === 0) {
        if (tagIndex > 0) {
          this.setState({
            editing: tagIndex - 1,
            caret: tags[tagIndex - 1].text.length
          });
        } else if (tagIndex === 0) {
          this.setState({
            editing: 0,
            caret: 0
          });
        } else {
          // tagIndex === void 0
          // this case happens when
          // press left/right/backspace key on empty tag
          var newState = {};

          if (lastKeyOnBlur === _const.KEYS.LEFT) {
            if (this.state.editing - 1 < 0) {
              return;
            }

            newState.editing = this.state.editing - 1;
            newState.caret = tags[newState.editing].text.length;
          }

          if (lastKeyOnBlur === _const.KEYS.RIGHT) {
            newState.editing = this.state.editing;
            newState.caret = 0;
          }

          this.setState(newState);
        }
      }

      if (caretOnBlur > 0) {
        if (tagIndex < tags.length - 1) {
          this.setState({
            editing: tagIndex + 1,
            caret: 0
          });
        } else if (tagIndex === tags.length - 1) {
          this.setState({
            editing: tags.length - 1,
            caret: tags[tags.length - 1].text.length
          });
        }
      }
    }
  }, {
    key: "handleTagRemove",
    value: function handleTagRemove(tag) {
      var tagText = tag.text;
      this.props.store.remove(tag);
      tagText.length && this.props.onChange && this.props.onChange(tagText, this.props.store.output(), 'remove');
    }
  }, {
    key: "handleTagSplit",
    value: function handleTagSplit(tag, textBeforeCaret, textAfterCaret) {
      this.props.store.insertAfterTag(tag, textAfterCaret, function (err, newTag, indexOfNewTag) {
        this.setState({
          editing: indexOfNewTag,
          caret: 0
        });
      }.bind(this));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var store = this.props.store;

      if (!store) {
        return _react.default.createElement("div", null);
      }

      var tags = this.props.store.tags;
      var tagNodes = tags.map(function (tag, i) {
        return _react.default.createElement(_Tag.default, {
          active: _this3.state.editing === i ? true : false,
          error: _this3.state.repeat === i ? true : false,
          caret: _this3.state.editing === i ? _this3.state.caret : null,
          onSave: _this3.handleTagSave.bind(_this3, tag),
          onFocus: _this3.handleTagFocus.bind(_this3, tag),
          onBlur: _this3.handleTagBlur.bind(_this3, tag),
          onRemove: _this3.handleTagRemove.bind(_this3, tag),
          onSplit: _this3.handleTagSplit.bind(_this3, tag),
          delimiterKeys: _this3.props.delimiters.filter(function (d) {
            return typeof d === 'number';
          }),
          delimiterChars: _this3.props.delimiters.filter(function (d) {
            return typeof d === 'string';
          }),
          key: tag.id
        }, tag.text);
      });

      if (!tags.length) {
        tagNodes = _react.default.createElement("div", {
          className: "tag-editor-placeholder"
        }, this.props.placeholder);
      }

      return _react.default.createElement("div", {
        className: "tag-editor" + (typeof this.state.editing === 'number' ? " is-active" : ""),
        onClick: this.handleClick.bind(this)
      }, tagNodes);
    }
  }]);

  return TagEditor;
}(_react.Component);

var _default = (0, _connectToStore.connectToStore)(TagEditor);

exports.default = _default;