"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _const = require("./const");

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Tag =
/*#__PURE__*/
function (_Component) {
  _inherits(Tag, _Component);

  function Tag(props) {
    var _this;

    _classCallCheck(this, Tag);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tag).call(this, props));
    _this.inputRef = _react.default.createRef();
    return _this;
  }

  _createClass(Tag, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var node = this.inputRef.current;

      if (this.props.active) {
        node.focus();
      } else {
        node.blur();
      }

      _utils.default.autoSize(node);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var node = this.inputRef.current,
          tagNode = (0, _reactDom.findDOMNode)(this),
          activityChanged = this.props.active !== nextProps.active;

      if (nextProps.active) {
        _utils.default.setCaretPos(node, nextProps.caret);
      } else {
        node.blur();
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      e.stopPropagation();

      if (e.target.tagName === 'A') {
        // click on X to remove
        this.props.onRemove();
      }
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      this.props.onFocus();
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      var node = this.inputRef.current;
      this.props.onSave(node.value);
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(e) {
      var charCode = _utils.default.getCharcode(e);

      for (var key in _const.KEYS) {
        if (_const.KEYS[key] === charCode) {
          keyHandlers[key].call(this, {
            originalEvent: e,
            caret: _utils.default.getCaretPos(this.inputRef.current),
            node: this.inputRef.current
          });
        }
      }

      if (this.props.delimiterKeys.indexOf(charCode) > -1) {
        e.preventDefault();
        var node = this.inputRef.current;
        this.split(node, _utils.default.getCaretPos(node));
      }
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      var _this2 = this;

      var tagText = e.target.value,
          node = this.inputRef.current,
          caretPos = _utils.default.getCaretPos(node),
          lastInput = tagText.charAt(caretPos - 1);

      this.props.delimiterChars.forEach(function (delimiter) {
        if (lastInput === delimiter) {
          _this2.split(node, caretPos - 1, caretPos);
        }
      });

      _utils.default.autoSize(node);
    }
  }, {
    key: "split",
    value: function split(node) {
      var positions = Array.prototype.slice.call(arguments, 1),
          tagText = node.value,
          textBeforeCaret = tagText.substring(0, positions[0]),
          textAfterCaret = tagText.substring(positions[1] || positions[0], tagText.length);
      node.value = textBeforeCaret;
      node.blur();
      this.props.onSplit(textBeforeCaret, textAfterCaret);
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", {
        className: "tag" + (this.props.error ? " has-error" : ""),
        onClick: this.handleClick.bind(this)
      }, _react.default.createElement("input", {
        type: "text",
        defaultValue: this.props.children.toString(),
        ref: this.inputRef,
        onFocus: this.handleFocus.bind(this),
        onBlur: this.handleBlur.bind(this),
        onKeyDown: this.handleKeyDown.bind(this),
        onChange: this.handleChange.bind(this)
      }), _react.default.createElement("a", {
        className: ""
      }, "\xD7"));
    }
  }]);

  return Tag;
}(_react.Component);

var keyHandlers = {
  LEFT: function LEFT(e) {
    if (e.caret === 0) {
      // seems that:
      // if current node do not blur
      // can not set next node to focus
      e.node.blur();
      e.originalEvent.preventDefault();
      this.props.onBlur(e.caret, _const.KEYS.LEFT);
    }
  },
  RIGHT: function RIGHT(e) {
    if (e.caret === e.node.value.length) {
      e.node.blur();
      e.originalEvent.preventDefault();
      this.props.onBlur(e.caret, _const.KEYS.RIGHT);
    }
  },
  BACKSPACE: function BACKSPACE(e) {
    if (e.caret === 0) {
      var node = e.node;

      if (node.selectionStart !== node.selectionEnd) {
        return;
      }

      e.node.blur();
      e.originalEvent.preventDefault();
      this.props.onBlur(e.caret, _const.KEYS.LEFT);
    }
  }
};
var _default = Tag;
exports.default = _default;