{"version":3,"sources":["components/constraints.js","components/Form0.js","components/Suggest.js","components/Step1.js","components/Step2.js","App.js","serviceWorker.js","index.js"],"names":["constraints","emailAddress","presence","allowEmpty","message","email","Form0","props","React","createRef","state","handleChange","bind","handleSubmit","event","this","setState","target","value","validationResult","validate","data","errors","JSON","stringify","preventDefault","Container","className","visible","Row","style","height","Col","src","right","ref","Form","Group","controlId","Label","Control","type","placeholder","onChange","Text","color","id","to","Button","variant","Component","getSuggestionValue","suggestion","name","renderSuggestion","backgroundColor","Suggest","newValue","renderSuggestionsContainer","containerProps","children","query","renderInputComponent","inputProps","onSuggestionsFetchRequested","myHeaders","Headers","append","requestOptions","method","headers","body","redirect","length","languages","fetch","then","response","json","result","suggestions","map","element","push","inn","ogrn","catch","error","console","log","onSuggestionsClearRequested","onSuggestionSelected","callback","palceholder","Step1","window","location","pathname","split","display","width","padding","justifyContent","alignItems","textAlign","Step2","setData","steps","title","activeStep","sm","disabled","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.498338e0.chunk.js","sourcesContent":["export const constraints = {\n    emailAddress: {\n      presence: {\n        allowEmpty: false,\n        message: \"^Введите свой email\"\n      },\n      email: {\n        message: \"^Введите валидный email\"\n      }\n    },\n  };\n  \n  export default constraints;","import React from 'react';\n\nimport {Link} from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button,Form} from 'react-bootstrap';\nimport {Container,Row,Col} from 'react-bootstrap';\n\nimport { validate } from 'validate.js';\nimport constraints from './constraints';\n\nclass Form0 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.email = React.createRef();\n      this.state = { email: '' };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {    this.setState({email: event.target.value});  }\n    handleSubmit(event) {\n        const validationResult = validate(this.state.data, constraints);\n         // validationResult is undefined if there are no errors\n        this.setState({ errors: JSON.stringify(validationResult.emailAddress[0])});\n        event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <Container className=\"p-3\" visible={this.props.visible}>\n            <Row style={{height:200}}>\n                <Col>\n                    <img src=\"https://factoringplus.ru/images/logo.svg\"></img>\n                </Col>\n                <Col style={{right:0}} ref={this.email}>\n                    <label>Зарегистрироваться</label>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Form>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Введите ваш email</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={this.handleChange}/>\n                            <Form.Text className=\"text-muted\" style={{color:\"#ff0000\"}}>{this.state.errors}</Form.Text>\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Задайте пароль</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" />\n                        </Form.Group>\n                        <Form.Group controlId=\"retypeBasicPassword\">\n                            <Form.Label>Повторите пароль</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" />\n                        </Form.Group>\n                        <Form.Group>\n                            <input type=\"checkbox\" id=\"claims\"/>\n                            <label>Согласен со всеми claims</label>\n                        </Form.Group>\n                        <Link to={\"/step1/\" + this.state.email}>\n                            <Button variant=\"primary\">\n                                Отправить\n                            </Button>\n                        </Link>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n      );\n    }\n  }\n\nexport default Form0;","import React from 'react';\nimport Autosuggest from 'react-autosuggest';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Button,Form} from 'react-bootstrap';\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <span style={{backgroundColor:\"#fff\"}}>\n    {suggestion.name}\n  </span>\n);\n\nclass Suggest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  renderSuggestionsContainer = ({ containerProps , children, query }) => {\n    return (\n      <div {... containerProps}>\n        {children}\n      </div>\n    );\n  }\n\n  renderInputComponent = inputProps => (\n    <div>\n      {/* <input {...inputProps} /> */}\n      <Form.Control {...inputProps} type=\"text\" placeholder={this.props.placeholder}/>\n    </div>\n  );\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Token cd5426b6f89b5b6b0ae66f413304c14f7da18704\");\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify({\"query\":value}),\n      redirect: 'follow'\n    };\n    if (value.length > 3) {\n      let languages = [];\n      fetch(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/\"+this.props.method, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n          result.suggestions.map(element => {\n            languages.push({name: element.value, inn:element.data.inn, ogrn:element.data.ogrn});\n          });\n          this.setState({ suggestions: languages });\n        })\n        .catch(error => console.log('error', error));\n    }\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onSuggestionSelected = (event, { suggestion }) => {\n    if(this.props.callback) {\n      this.props.callback(suggestion);\n    }\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: this.props.palceholder,\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        renderInputComponent={this.renderInputComponent}\n        renderSuggestionsContainer={this.renderSuggestionsContainer}\n        onSuggestionSelected={this.onSuggestionSelected}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default Suggest;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button,Form} from 'react-bootstrap';\nimport {Container,Row,Col} from 'react-bootstrap';\n\nimport Suggest from '../components/Suggest';\n\nclass Step1 extends React.Component {\n    constructor(props) {\n      super(props);\n      \n      this.state = {\n        email: window.location.pathname.split(\"/\")[2]\n      };\n    }\n  \n    render() {\n      return (\n        <Container className=\"p-3\">\n            <Row style={{height:200}}>\n                <Col>\n                    <img src=\"https://factoringplus.ru/images/logo.svg\"></img>\n                </Col>\n                <Col style={{right:0}}>\n                  <label>{this.state.email}</label>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                  <div style={{display: \"flex\", width:\"100%\", height:200, padding:40, backgroundColor:\"#f8f8f8\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <div style={{width:550, textAlign:\"center\"}}>Какая-то увлекательная картинка или инфографика, побудить закончить процесс регистрации + список необходимых документов</div>\n                  </div>\n                  <br/>\n                  <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }} >\n                    <Link to={\"/step2/\" + this.state.email}>\n                      <Button variant=\"primary\">Продолжить?</Button>\n                    </Link>\n                  </div>\n                </Col>\n            </Row>\n        </Container>\n      );\n    }\n  }\n\nexport default Step1;","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nimport Stepper from 'react-stepper-horizontal';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Button,Form} from 'react-bootstrap';\nimport {Container,Row,Col} from 'react-bootstrap';\n\nimport Suggest from '../components/Suggest';\n\nclass Step2 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        inn: \"\",\n        ogrn: \"\",\n        email: window.location.pathname.split(\"/\")[2]\n      };\n    }\n\n    setData = (value) => {\n      console.log(value.inn);\n      this.setState({inn:value.inn, ogrn:value.ogrn});\n    };\n  \n    render() {\n      return (\n        <Container className=\"p-3\">\n            <Row style={{height:100}}>\n                <Col>\n                    <img src=\"https://factoringplus.ru/images/logo.svg\"></img>\n                </Col>\n                <Col style={{right:0}}>\n                  <label>{this.state.email}</label>\n                </Col>\n                <Col>\n                  <Link to=\"/form0\">\n                    <Button variant=\"light\">\n                        Закончить позже\n                    </Button>\n                  </Link>\n                </Col>\n            </Row>\n            <Row>\n              <Col>\n              <Stepper steps={ [{title: 'Step One'}, {title: 'Step Two'}, {title: 'Step Three'}, {title: 'Step Four'}] } activeStep={ 0 } />\n                <br/>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <h1>Информация о компании</h1><br/><br/><br/>\n                <Form>\n                  <Row>\n                    <Col sm>\n                      <Form.Group controlId=\"formBasicEmail\">\n                          <Form.Label>Наименование компании</Form.Label>\n                          <Suggest placeholder=\"ИНН или наименование компании\" callback={this.setData} method=\"party\"/>\n                      </Form.Group>\n                    </Col>\n                    <Col sm>\n                      <Form.Group controlId=\"formBasicEmail\">\n                          <Form.Label>ИНН компании</Form.Label>\n                          <Form.Control type=\"text\" value={this.state.inn} disabled/>\n                      </Form.Group>\n                    </Col>\n                    <Col sm> \n                      <Form.Group controlId=\"formBasicEmail\">\n                          <Form.Label>ОГРН компании</Form.Label>\n                          <Form.Control type=\"text\" value={this.state.ogrn} disabled/>\n                      </Form.Group>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col sm>\n                      <Form.Group controlId=\"formBasicPassword\">\n                          <Form.Label>ФИО</Form.Label>\n                          <Suggest placeholder=\"Иванов Иван Иванович\" method=\"fio\"/>\n                      </Form.Group>\n                    </Col>\n                    <Col sm>\n                      <Form.Group controlId=\"retypeBasicPassword\">\n                          <Form.Label>Ваша должность</Form.Label>\n                          <Form.Control type=\"text\" placeholder=\"Менеджер\" />\n                      </Form.Group>\n                    </Col>\n                    <Col sm>\n                      <Form.Group controlId=\"retypeBasicPassword\">\n                          <Form.Label>Ваш номер телефона</Form.Label>\n                          <Form.Control type=\"text\" placeholder=\"+7 903 000 00 00\" />\n                      </Form.Group>\n                    </Col>\n                  </Row>\n                </Form>\n              </Col>\n            </Row>\n            <Row>\n                <Col>\n                  <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }} >\n                    <Link to=\"/step3\">\n                      <Button variant=\"primary\">Далее</Button>\n                    </Link>\n                  </div>\n                </Col>\n            </Row>\n        </Container>\n      );\n    }\n  }\n\nexport default Step2;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Form0 from \"./components/Form0\";\nimport Step1 from \"./components/Step1\";\nimport Step2 from \"./components/Step2\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n\n        <Switch>\n          <Route path=\"/step2\">\n            <Step2 />\n          </Route>\n          <Route path=\"/step1/:email\">\n            <Step1 />\n          </Route>\n          <Route path=\"/\">\n            <Form0 />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}